#pragma once

#include <iostream>
#include <string>
using namespace std;

#include "SFML/Graphics.hpp"
#include "SFML/Window/Keyboard.hpp"

#include <windows.h>
static sf::RenderWindow *window;

//#include "sprite.h"
//#include "text.h"
//#include "sound.h"
//#include "music.h"
//#include "Input.h"
//#include "Scene.h"

//typedef sf::Keyboard::Key KEY;
//typedef sf::Mouse::Button MOUSE;
//typedef sf::Vector2f Vector2f;

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Retorna a versão da biblioteca GPL. </summary>
///
/// <returns>	string da versão. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

string gplVersion();

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Inicializa a biblioteca. </summary>
///
/// <param name="width">	  	(Opcional) Resolução X/largura da janela. </param>
/// <param name="height">	  	(Opcional) Resolução Y/altura da janela. </param>
/// <param name="windowTitle">	(Opcional) Nome da janela. </param>
/// <param name="showMouse">  	(Opcional) Exibir o ponteiro do mouse, padrão é exibir. </param>
/// <param name="fullscreen"> 	(Opcional) Modo tela-cheia, padrão é sim. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
sf::RenderWindow* gplInit(unsigned int width = 800, unsigned int height = 600, string windowTitle = "Window Name", bool showMouse = true, bool fullscreen = true);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Cria uma Splash Screen. </summary>
///
/// <param name="filename">	Caminho do arquivo do sprite da splash a ser carregada (bmp, png, tga,
/// 						jpg, gif, psd, hdr, pic) </param>
/// <param name="showTime">	(Opcional) Tempo mínimo de exibiçao, padrão 5s </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void gplSplashScreen(string filename, unsigned int showTime = 5);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Define um icone para a janela do aplicativo. </summary>
///
/// <param name="iconFile">	Caminho do arquivo do sprite do icone a ser carregado (bmp, png, tga,
/// 						jpg, gif, psd, hdr, pic) </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void gplSetIcon(string iconFile);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Define a taxa de FPS. </summary>
///
/// <param name="fps">	FPS. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void gplSetFPS(unsigned int fps);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Retorna o FPS</summary>
///
/// <returns>	Quantidade de FPS</returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
int gplGetFPS();

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Atualiza o buffer de pintura. </summary>
///
////////////////////////////////////////////////////////////////////////////////////////////////////
void gplFlush();

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Faz o programa aguardar um tempo. </summary>
///
/// <param name="milisec">	tempo em milisegundos que o programa ficará parado. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void gplSleep(int milisec);

void draw(sf::Sprite *t, bool borda = false);

void write(sf::Text *text);

//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Desenha um pixel. </summary>
/////
///// <param name="x">	Posição em X </param>
///// <param name="y">	Posição em Y </param>
///// <param name="R">	(Opcional) Cor vermelha (0 - 255), padrão = 255. </param>
///// <param name="G">	(Opcional) Cor verde (0 - 255), padrão = 255. </param>
///// <param name="B">	(Opcional) Cor azuk (0 - 255), padrão = 255. </param>
///// <param name="A">	(Opcional) Opacidade (0 - 255), padrão = 255. </param>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//void pixel(int x, int y, int R = 255, int G = 255, int B = 255, int A = 255);
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Desenha uma linha. </summary>
/////
///// <param name="x">			Posição em X. </param>
///// <param name="y">			Posição em Y. </param>
///// <param name="lenght">   	Comprimento da linha. </param>
///// <param name="thickness">	(Opcional) Espessura da linha, padrão = 1. </param>
///// <param name="R">			(Opcional) Cor vermelha (0 - 255), padrão = 255. </param>
///// <param name="G">			(Opcional) Cor verde (0 - 255), padrão = 255. </param>
///// <param name="B">			(Opcional) Cor azuk (0 - 255), padrão = 255. </param>
///// <param name="A">			(Opcional) Opacidade (0 - 255), padrão = 255. </param>
///// <param name="angle">		(Opcional) Ângulo, padrão = 0 (zero) </param>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//void line(int x, int y, int lenght, int thickness = 1, int R = 255, int G = 255, int B = 255, int A = 255, int angle = 0);
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Desenha um retangulo. </summary>
/////
///// <param name="x">			Posição em X. </param>
///// <param name="y">			Posição em Y. </param>
///// <param name="width">		Largura. </param>
///// <param name="height">   	Altura. </param>
///// <param name="thickness">	(Opcional) Espessura borda, padrão = 1. </param>
///// <param name="R">			(Opcional) Cor vermelha (0 - 255), padrão = 255. </param>
///// <param name="G">			(Opcional) Cor verde (0 - 255), padrão = 255. </param>
///// <param name="B">			(Opcional) Cor azuk (0 - 255), padrão = 255. </param>
///// <param name="A">			(Opcional) Opacidade (0 - 255), padrão = 255. </param>
///// <param name="angle">		(Opcional) Ângulo, padrão = 0 (zero) </param>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//void rectangle(int x, int y, int width, int height, int thickness = 1, int R = 255, int G = 255, int B = 255, int A = 255, int angle = 0);
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Desenha um círculo. </summary>
/////
///// <param name="x">			Posição em X. </param>
///// <param name="y">			Posição em Y. </param>
///// <param name="radius">   	Raio do círculo. </param>
///// <param name="thickness">	(Opcional) Espessura borda, padrão = 1. </param>
///// <param name="R">			(Opcional) Cor vermelha (0 - 255), padrão = 255. </param>
///// <param name="G">			(Opcional) Cor verde (0 - 255), padrão = 255. </param>
///// <param name="B">			(Opcional) Cor azuk (0 - 255), padrão = 255. </param>
///// <param name="A">			(Opcional) Opacidade (0 - 255), padrão = 255. </param>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//void circle(int x, int y, int radius, int thickness = 1, int R = 255, int G = 255, int B = 255, int A = 255);
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Retorna a movimentação do scroll do mouse. </summary>
/////
///// <returns>	Se for positivo é para cima, se for negativo é para baixo. </returns>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//int getMouseScroll();
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Retorna a posição do mouse em X na janela. </summary>
/////
///// <returns>	Coordenada X do mouse </returns>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//int getMouseX();
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Retorna a posição do mouse em Y na janela. </summary>
/////
///// <returns>	Coordenada Y do mouse </returns>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//int getMouseY();
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Verifica se uma tecla foi pressionada. </summary>
/////
///// <param name="key">	Tecla a ser verificada. </param>
/////
///// <returns>	true se a tecla foi pressionada e false se não foi </returns>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//bool isKeyPressed(KEY key);
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
///// <summary>	Verifica se um botão do mouse foi pressionado. </summary>
/////
///// <param name="mouse">	Botão do mouse a ser verificado. </param>
/////
///// <returns>	true se o botão foi pressionado e false se não foi. </returns>
//////////////////////////////////////////////////////////////////////////////////////////////////////
//bool isButtonPressed(MOUSE mouse);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, char value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, float value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, double value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, int value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, string value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Exibe no terminal o texto e seu valor </summary>
///
/// <param name="key">  	Texto </param>
/// <param name="value">	Variável </param>
////////////////////////////////////////////////////////////////////////////////////////////////////
void debug(string key, bool value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Retorna a resolução da altura da janela. </summary>
///
/// <returns>	Altura da janela </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
int getScreenHeight();

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Retorna a resolução da largura da janela. </summary>
///
/// <returns>	Largura da janela. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////
int getScreenWidth();