#pragma once

#include <string>
using namespace std;

//#include "gpl_include.h"
//#include "Base.h"
#include "Game.h"


class GPL : public Base
{
public:

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Inicializa a biblioteca. </summary>
	///
	/// <param name="width">	  	(Opcional) Resolução X/largura da janela. </param>
	/// <param name="height">	  	(Opcional) Resolução Y/altura da janela. </param>
	/// <param name="windowTitle">	(Opcional) Nome da janela. </param>
	/// <param name="showMouse">  	(Opcional) Exibir o ponteiro do mouse, padrão é exibir. </param>
	/// <param name="fullscreen"> 	(Opcional) Modo tela-cheia, padrão é sim. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	GPL(unsigned int width = 800, unsigned int height = 600, string windowTitle = "Window Name", bool showMouse = true, bool fullscreen = true);
	~GPL(void);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Retorna a versão da biblioteca GPL. </summary>
	///
	/// <returns>	string da versão. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	string gplVersion();

	void evolve(Game game);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Retorna a resolução da altura da janela. </summary>
	///
	/// <returns>	Altura da janela </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	int getScreenHeight();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Retorna a resolução da largura da janela. </summary>
	///
	/// <returns>	Largura da janela. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	int getScreenWidth();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Define um icone para a janela do aplicativo. </summary>
	///
	/// <param name="iconFile">	Caminho do arquivo do sprite do icone a ser carregado (bmp, png, tga,
	/// 						jpg, gif, psd, hdr, pic) </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void gplSetIcon(string iconFile);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Define a taxa de FPS. </summary>
	///
	/// <param name="fps">	FPS. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void gplSetFPS(unsigned int fps);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Retorna o FPS</summary>
	///
	/// <returns>	Quantidade de FPS</returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	int gplGetFPS();

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Faz o programa aguardar um tempo. </summary>
	///
	/// <param name="milisec">	tempo em milisegundos que o programa ficará parado. </param>
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void gplSleep(int milisec);
private:
	int splashTime;
	sf::Clock relogio;
	sf::Time tempo;
	sf::Event event;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Atualiza o buffer de pintura. </summary>
	///
	////////////////////////////////////////////////////////////////////////////////////////////////////
	void flush();
};

